#include <algorithm>
#include <memory>
#include <ostream>
#include <utility>

#include <cppnet/log.hpp>
#include <cppnet/socket.hpp>
#include <cppnet/socket_selector.hpp>
#include <socket_impl.hpp>

#ifdef _MSC_VER
#pragma warning(disable : 4127) // "conditional expression is constant" generated by the FD_SET macro
#endif


namespace cppnet
{
////////////////////////////////////////////////////////////
struct SocketSelector::SocketSelectorImpl
{
    fd_set all_sockets;   //!< Set containing all the sockets handles
    fd_set sockets_ready; //!< Set containing handles of the sockets that are ready
    int    max_socket;    //!< Maximum socket handle
    int    socket_count;  //!< Number of socket handles
};


////////////////////////////////////////////////////////////
SocketSelector::SocketSelector() : m_impl(std::make_unique<SocketSelectorImpl>())
{
    clear();
}


////////////////////////////////////////////////////////////
SocketSelector::SocketSelector(const SocketSelector& copy) : m_impl(std::make_unique<SocketSelectorImpl>(*copy.m_impl))
{
}

////////////////////////////////////////////////////////////
void SocketSelector::add(Socket& socket)
{
    SocketHandle handle = socket.get_handle();
    if (handle != priv::SocketImpl::invalid_socket())
    {

#if defined(CPPNET_PLATFORM_WINDOWS)

        if (m_impl->socket_count >= FD_SETSIZE)
        {
            err() << "The socket can't be added to the selector because the "
                  << "selector is full. This is a limitation of your operating "
                  << "system's FD_SETSIZE setting.";
            return;
        }

        if (FD_ISSET(handle, &m_impl->all_sockets))
            return;

        ++m_impl->socket_count;

#else

        if (handle >= FD_SETSIZE)
        {
            err() << "The socket can't be added to the selector because its "
                  << "ID is too high. This is a limitation of your operating "
                  << "system's FD_SETSIZE setting.";
            return;
        }

        // SocketHandle is an int in POSIX
        m_impl->max_socket = std::max(m_impl->max_socket, handle);

#endif

        FD_SET(handle, &m_impl->all_sockets);
    }
}


////////////////////////////////////////////////////////////
void SocketSelector::remove(Socket& socket)
{
    SocketHandle handle = socket.get_handle();
    if (handle != priv::SocketImpl::invalid_socket())
    {

#if defined(CPPNET_PLATFORM_WINDOWS)

        if (!FD_ISSET(handle, &m_impl->all_sockets))
            return;

        --m_impl->socket_count;

#else

        if (handle >= FD_SETSIZE)
            return;

#endif

        FD_CLR(handle, &m_impl->all_sockets);
        FD_CLR(handle, &m_impl->sockets_ready);
    }
}


////////////////////////////////////////////////////////////
void SocketSelector::clear()
{
    FD_ZERO(&m_impl->all_sockets);
    FD_ZERO(&m_impl->sockets_ready);

    m_impl->max_socket   = 0;
    m_impl->socket_count = 0;
}


////////////////////////////////////////////////////////////
bool SocketSelector::wait(Time timeout)
{
    // Setup the timeout
    timeval time;
    time.tv_sec  = static_cast<long>(std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() / 1000000);
    time.tv_usec = static_cast<int>(std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000);

    // Initialize the set that will contain the sockets that are ready
    m_impl->sockets_ready = m_impl->all_sockets;

    // Wait until one of the sockets is ready for reading, or timeout is reached
    // The first parameter is ignored on Windows
    int count = select(m_impl->max_socket + 1, &m_impl->sockets_ready, nullptr, nullptr, timeout != 0s ? &time : nullptr);

    return count > 0;
}


////////////////////////////////////////////////////////////
bool SocketSelector::is_ready(Socket& socket) const
{
    SocketHandle handle = socket.get_handle();
    if (handle != priv::SocketImpl::invalid_socket())
    {

#if !defined(CPPNET_PLATFORM_WINDOWS)

        if (handle >= FD_SETSIZE)
            return false;

#endif

        return FD_ISSET(handle, &m_impl->sockets_ready) != 0;
    }

    return false;
}


////////////////////////////////////////////////////////////
SocketSelector& SocketSelector::operator=(const SocketSelector& right)
{
    SocketSelector temp(right);

    std::swap(m_impl, temp.m_impl);

    return *this;
}

} // namespace cppnet
